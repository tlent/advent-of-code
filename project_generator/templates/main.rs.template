#![feature(test)]
extern crate test;

const INPUT: &str = include_str!("../input.txt");

struct Input {}

fn parse_input(input: &str) -> Result<Input, &str> {
    todo!()
    Ok(Input {})
}

fn part_one(input: &Input) -> u32 {
    todo!()
}

fn part_two(input: &Input) -> u32 {
    todo!()
}

fn main() {
    match parse_input(INPUT) {
        Ok(input) => {
            let run_mode = std::env::args().nth(1);
            match run_mode.as_deref() {
                Some("parse") => {}
                Some("one") => println!("{}", part_one(&input)),
                Some("two") => println!("{}", part_two(&input)),
                Some("all") => {
                    println!("{}", part_one(&input));
                    println!("{}", part_two(&input));
                }
                _ => eprintln!("Invalid argument: must be one of 'all', 'parse', 'one', or 'two'."),
            }
        }
        Err(e) => eprintln!("Parse error: {e}"),
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::hint::black_box;
    use test::Bencher;

    #[test]
    fn test_part_one() {
        let input = parse_input(INPUT).unwrap();
        assert_eq!(part_one(&input), todo!());
    }

    #[test]
    fn test_part_two() {
        let input = parse_input(INPUT).unwrap();
        assert_eq!(part_two(&input), todo!());
    }

    #[bench]
    fn bench_parse_input(b: &mut Bencher) {
        b.iter(|| parse_input(black_box(INPUT)));
    }

    #[bench]
    fn bench_part_one(b: &mut Bencher) {
        let input = parse_input(INPUT).unwrap();
        b.iter(|| part_one(black_box(&input)));
    }

    #[bench]
    fn bench_part_two(b: &mut Bencher) {
        let input = parse_input(INPUT).unwrap();
        b.iter(|| part_two(black_box(&input)));
    }

}
